Strict

#GLFW_WINDOW_TITLE="Builtris Tile Viewer"
#GLFW_WINDOW_WIDTH=800
#GLFW_WINDOW_HEIGHT=600
#GLFW_WINDOW_RESIZABLE=True
#GLFW_WINDOW_SAMPLES=0

Import mojo.app
Import mojo.input
Import vortex

Class TileSelectApp Extends App Final
	Method OnCreate:Int()
		SetUpdateRate(0)
		SetSwapInterval(0)
		Seed = Millisecs()
		If Not World.Init() Then EndApp()
		World.SunRotation(45, -135)
		
		mFont = Font.Load("8-bit-hud_8.fnt.dat")
		
		mCam = New Camera()
		mCam.Orthographic = True
		mCam.FovY = 4
		mCam.Rotate(45, -45, 0)
		mCam.Move(0, 0, -4)
		mCam.BackgroundColor = Color.DarkGray
		
		NextModel()
		
		Return False
	End
	
	Method OnUpdate:Int()
		'End with escape key
		#If TARGET<>"html5"
		If KeyHit(KEY_ESCAPE) Then EndApp()
		#End
		
		If KeyHit(KEY_LEFT) Then PrevModel()
		If KeyHit(KEY_RIGHT) Then NextModel()
		
		mModel.Turn(0, 64 * World.DeltaTime(), 0)
		
		'Update world
		World.Update()
		
		Return False
	End
	
	Method OnRender:Int()
		World.Render()
		
		Graphics.Setup2D(0, 0, DeviceWidth(), DeviceHeight())
		Local text:String = Filename()
		Graphics.Color(Color.White)
		mFont.Draw((DeviceWidth() - mFont.TextWidth(text)) / 2 - 1, -1, text)
		mFont.Draw((DeviceWidth() - mFont.TextWidth(text)) / 2 - 1,  1, text)
		mFont.Draw((DeviceWidth() - mFont.TextWidth(text)) / 2 + 1, -1, text)
		mFont.Draw((DeviceWidth() - mFont.TextWidth(text)) / 2 + 1,  1, text)
		Graphics.Color(Color.Black)
		mFont.Draw((DeviceWidth() - mFont.TextWidth(text)) / 2, 0, text)
		Return False
	End
Private
	Field mFont:Font
	Field mCam:Camera
	Field mModel:Model
	Field mCurrentId:Int
	
	Method NextModel:Void()
		mCurrentId += 1
		If mCurrentId > 302 Then mCurrentId = 1
		LoadModel()
	End
	
	Method PrevModel:Void()
		mCurrentId -= 1
		If mCurrentId < 1 Then mCurrentId = 302
		LoadModel()
	End
	
	Method LoadModel:Void()
		Local filename:String = Filename()
		If mModel <> Null Then mModel.Discard()
		Local wasLoaded:Bool = Mesh.IsLoaded(filename)
		Local mesh:Mesh = Mesh.Load(filename)
		If Not wasLoaded
			Local max:Float = Max(Max(mesh.Width, mesh.Height), mesh.Depth)
			Local offsetX:Float = (mesh.BoxMaxX - mesh.BoxMinX) / 2
			Local offsetY:Float = (mesh.BoxMaxY - mesh.BoxMinY) / 2
			Local offsetZ:Float = (mesh.BoxMaxZ - mesh.BoxMinZ) / 2
			mesh.Translate(offsetX, offsetY, offsetZ)
			mesh.Scale(1 / max, 1 / max, 1 / max)
		End
		mModel = New Model(mesh)
	End
	
	Method LPad:String(str:String, char:String, len:Int)
		char = char[0..1]
		Local amount:Int = Max(0, len - str.Length)
		Local lpad:String = ""
		For Local i:Int = 0 Until amount
			lpad += char
		Next
		Return lpad + str
	End
	
	Method Filename:String()
		Return "roadTile_" + LPad(mCurrentId, "0", 3) + ".msh.dat"
	End
End

Function Main:Int()
	New TileSelectApp
	Return False
End
