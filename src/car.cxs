Strict

Private
Import gamedelegate
Import mojo.audio
Import src.animator.animator
Import src.animator.positionanimator
Import tile
Import vortex

Public
Class Car Implements AnimatorDelegate
	Method New(tile:Tile, delegate:GameDelegate)
		InitSound()
		mGameDelegate = delegate
		mEntity = New Entity()
		Local car:Model = New Model(LoadUnitMesh("sedanSports.msh.dat"), mEntity)
		car.Rotate(0, -90, 0)
		car.Scale(0.8, 0.8, 0.8)
		mEntity.Position(tile.X, 0, tile.Z)
		mEntity.Rotate(0, Yaw(tile), 0)
		mPath = Null
		mTarget = Null
	End
	
	Method Discard:Void()
		mEntity.Discard()
	End
	
	Method SetPath:Void(path:List<Tile>, target:Tile)
		mPath = path
		mTarget = target
		PlaySound(sound, CAR_CHANNEL, 1)
		CreateAnimatorToNextNode()
	End
	
	Method Moving:Bool() Property
		Return mPath <> Null
	End
	
	Method OnAnimatorEnd:Void(animator:Animator)
		If Not CreateAnimatorToNextNode()
			StopChannel(CAR_CHANNEL)
			If Tile.FromEntity(mEntity).Equals(mTarget)
				If mGameDelegate <> Null Then mGameDelegate.OnWin()
			Else
				If mGameDelegate <> Null Then mGameDelegate.OnLose()
			End
		End
	End
Private
	Const CAR_CHANNEL:Int = 2

	Global sound:Sound
	
	Field mGameDelegate:GameDelegate
	Field mEntity:Entity
	Field mPath:List<Tile>
	Field mTarget:Tile
	
	Function InitSound:Void()
		If sound = Null Then sound = LoadSound("car.ogg")
	End
	
	Function LoadUnitMesh:Mesh(filename:String)
		Local wasLoaded:Bool = Mesh.IsLoaded(filename)
		Local mesh:Mesh = Mesh.Load(filename)
		If Not wasLoaded
			Local max:Float = Max(Max(mesh.Width, mesh.Height), mesh.Depth)
			mesh.Scale(1 / max, 1 / max, 1 / max)
		End
		Return mesh
	End
	
	Method Yaw:Float(tile:Tile)
		If tile.Column < 0
			Return 90
		Elseif tile.Column >= Tile.NumRows
			Return -90
		Elseif tile.Row < 0
			Return 180
		Else
			Return 0
		End
	End
	
	Method RotateToTile:Void(tile:Tile)
		Local myTile:Tile = Tile.FromEntity(mEntity)
		Local yaw:Float = mEntity.Yaw
		If myTile.Column < tile.Column
			yaw = 90
		Elseif myTile.Column > tile.Column
			yaw = -90
		Elseif myTile.Row < tile.Row
			yaw = 180
		Else
			yaw = 0
		End
		mEntity.Rotate(0, yaw, 0)
	End
	
	Method CreateAnimatorToNextNode:Bool()
		If Not mPath.IsEmpty()
			Local nextTile:Tile = mPath.RemoveFirst()
			Self.RotateToTile(nextTile)
			New PositionAnimator(mEntity, nextTile.X, 0, nextTile.Z, "CarAnimator", 0.5, 0, Self)
			Return True
		Else
			Return False
		End
	End
End
